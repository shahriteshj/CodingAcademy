Portable - execute on anu m/c having jre insatlled

if jdk is 1.8 then jre should be >= 1.8

Java application is portable but JRE is OS and system specific

JRE contains JVM, runtime libraries and tools

Every java code is compiled and interpreted

REPL - Read, evauate, print and Loop

Portable, secured, robust and OO



java is strongly typed language. - Once a variable of specific type declared, not other value type will b allowed to store


byte (1), short (2), int (4), long (8), float (4), double (8)
char
boolean

same name methods with different parameters is overloading 

OOP principles
Single reponsibility Principle (SRP) -  One class hould have one and only one responsibility
Open Closed Responsibility (OCP) - S/w components should be open for extension, but closed for modification. it should be able to add new requirements to classes without modifying existing functionality
Liskov Substitution Responsibility (LSR) - Derived classes must be substitutable for their base classes
Dependency Inversion Principle (DIP) - Depend on abstraction and not on concretions
Interface Segregation Principle (ISP) - Prepare fine grained interfaces that are client specific



private - same class
default - same class, same package subclass, same package non-subclass
protected - same class, same package subclass, same package non-subclass, different package subclass
Public - same class, same package subclass, same package non-subclass, different package subclass, diffeent package non subclass


static keyword can be used with variable, method, block and nested class


Iterators are used only for arrays and collections

AutoBoxing - Integer n = 100;
AutoUnBoxing int k = n; //Provided object n is Integer object and already present

Polymorphism -- to be explained

base = derived // Implicit


derieved = (derieved) base //Explicit. If derieved is incorrect then runtime error


Inheritance:

Protected vairable can be accessed only 1 level below

<VAR> instance of <Class>
where VAR must be object of "Class" or any of its base class

Exceptions
Recoverable and Non Recoverable

catch can allow any object that inherits from Throwable

Object -> Throwable 
Exceptions (Recoverable)										
	Checked Exceptions	(Unavoidable)	Compiler forces to have try catch
	Unchecked Exceptions (Avoidable)	These inherit from RuntimeException							
																	
																	
Error (Non Recoverable)																	
	Virtual Machine Error
	Assertion Error
	OutOfMemoryError
	

A
try{
B
C
}catch(...)
{
D
}
E

1. When No Exception: A->B->C->E
2. When Exception occurs at B:  A->D->E
3. Exception occurs at B which cannot be handled by Catch: A
===========================================================================

Arrays, Collections & Generics

Array - hold many objects of same type

varargs - multiple arguments of same type
UseCase 1. avoid method overloading when parameters are of same type
		vargs internally uses arrays
		
=========================================================================
STATIC IMPORT

 static import, we can access the static members of a class directly without class name or any object.
 e.g. import static java.lang.Math.*; 
 
===============================================================================

Collection Interfaces
Collection
Iterator
ListIterator
Comparable
Comparator
compareTo return integer. 0 for equal, 1 for left is greater and -1 for right is greater

Comparators
1. For compaing "age" of students
2. for comparing last names



==============================================================================
Overview of I/O concepts in java

Byte-stream 
Character-stream
Buffered stream


System.in (InputStream) -> InputStreamReader (Reader) -> BufferedReader

==================================================================================

Java DB connectivity

Type 4 - Thin Driver (1st JDBC driver Purely written in Java) Driver interacts directly with database using DB specific calls. Does not require any native database library and hence known as thin driver
Type 3 - Netweork Protocol Driver  - App connects directly to DB server using middleware server on Database server like(OCI Oracle Call Interface)
Type 2 - Native API Partly Java Driver
Type 1 - JDBC-ODBC bridge (Slowest)

Selection of driver starts from 4 and moves to 1

Type 1 is not supported Java 8 onwards


Oracle
mySql
postgres


Creational
Factory Method
Abstract Factory
Builder
Prototype
Singleton


Structural
Adaptor
Bridge
Composite
Decorator
Facade
Flyweight
Proxy


Behavioural

Template
Chain of Responsibility
Visitor
Memento
Interpretor - eg regex 
Itrator - provide a way to access all elements sequentially

Mediator - Mediator design pattern is one of the important and widely used behavioral design pattern. Mediator enables decoupling of objects by introducing a layer in between so that the interaction between objects happen via the layer. If the objects interact with each other directly, the system components are tightly-coupled with each other that makes higher maintainability cost and not hard to extend. Mediator pattern focuses on providing a mediator between objects for communication and help in implementing lose-coupling between objects.
Air traffic controller is a great example of mediator pattern where the airport control room works as a mediator for communication between different flights. Mediator works as a router between objects and it can have itâ€™s own logic to provide way of communication.

Observer -The Observer Pattern defines a one to many dependency between objects so that one object changes state, all of its dependents are notified and updated automatically.

Strategy - 

Template