AA/A/*A/**A/**A/**
A/**
 A/**
 *A/**
 * A/**
 * A/**
 * 
A/**
 * 
 A/**
 * 
 *A/**
 * 
 */A/**
 * 
 */A/**
 * 
 */
A/**
 * 
 */
A/**
 * 
 */

A/**
 * 
 */

iA/**
 * 
 */

imA/**
 * 
 */

impA/**
 * 
 */

impoA/**
 * 
 */

imporA/**
 * 
 */

importA/**
 * 
 */

import A/**
 * 
 */

import jA/**
 * 
 */

import jaA/**
 * 
 */

import javA/**
 * 
 */

import javaA/**
 * 
 */

import java.A/**
 * 
 */

import java.uA/**
 * 
 */

import java.utA/**
 * 
 */

import java.utiA/**
 * 
 */

import java.utilA/**
 * 
 */

import java.util.A/**
 * 
 */

import java.util.DA/**
 * 
 */

import java.util.DaA/**
 * 
 */

import java.util.DatA/**
 * 
 */

import java.util.DateA/**
 * 
 */

import java.util.Date;A/**
 * 
 */

import java.util.Date;/A/**
 * 
 */

import java.util.Date;/*A/**
 * 
 */

import java.util.Date;/**A/**
 * 
 */

import java.util.Date;/** A/**
 * 
 */

import java.util.Date;/** *A/**
 * 
 */

import java.util.Date;/** * A/**
 * 
 */

import java.util.Date;/** * @A/**
 * 
 */

import java.util.Date;/** * @aA/**
 * 
 */

import java.util.Date;/** * @auA/**
 * 
 */

import java.util.Date;/** * @autA/**
 * 
 */

import java.util.Date;/** * @authA/**
 * 
 */

import java.util.Date;/** * @authoA/**
 * 
 */

import java.util.Date;/** * @authorA/**
 * 
 */

import java.util.Date;/** * @author A/**
 * 
 */

import java.util.Date;/** * @author SA/**
 * 
 */

import java.util.Date;/** * @author SMA/**
 * 
 */

import java.util.Date;/** * @author SMiA/**
 * 
 */

import java.util.Date;/** * @author SMitA/**
 * 
 */

import java.util.Date;/** * @author SMitaA/**
 * 
 */

import java.util.Date;/** * @author SMita A/**
 * 
 */

import java.util.Date;/** * @author SMita *A/**
 * 
 */

import java.util.Date;/** * @author SMita * A/**
 * 
 */

import java.util.Date;/** * @author SMita * *A/**
 * 
 */

import java.util.Date;/** * @author SMita * */A/**
 * 
 */

import java.util.Date;/** * @author SMita * */A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public clA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public claA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public clasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public classA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private DA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private DaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private DatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private DateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//daA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//datA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//dateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date ofA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of jA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joiniA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joininA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joiningA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joiningA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//steA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//stepA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 :A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private staA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private statA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private statiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private staticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static vaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static varA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variabA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variablA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variableA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variablesA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variablesA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	privA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	privaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	privatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	privateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private staA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private statA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private statiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private staticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int nA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int nuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//auA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//autA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//autoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automaticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic idA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id genA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id geneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generatiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generatioA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generationA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generationA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//steA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//stepA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 :A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : staA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : statA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : statiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : staticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static iniA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initiaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initialA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initialiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializerA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer bA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer blA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer bloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer blocA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer blockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer blockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	staA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	statA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	statiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	staticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SysA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SystA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SysteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		SystemA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.ouA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.outA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.prinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.printA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.printlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.printlnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****StaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****StatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****StatiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****StaticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static IA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static IniA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitiaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitialA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitialiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitializA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitializeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static InitializerA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer BA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer BlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer BloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer BlocA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer BlockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** exA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** exeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** execA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** execuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed onA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed onlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed onlyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only onA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only oncA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only onceA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once anA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once andA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and bA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and beA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and befA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and befoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and beforA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and beforeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constucA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor"A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor")A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//auA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//autA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//autoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automaticA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic idA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id genA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id geneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generatiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generatioA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generationA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generationA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		nA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		nuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=1A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=100A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=1000A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (MA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (MaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (MatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (MathA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.raA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.ranA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.randA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.randoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.randomA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*1A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*12A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.1A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.12A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//exA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//expA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//expliA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//expliciA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitlyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly tyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly typA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly typeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type caA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type casA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type castA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast loA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast lonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast longA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long toA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//stA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//steA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//stepA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6:A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: iniA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initiaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initialA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initialiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializerA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer bA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer blA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer bloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer blocA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer blockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer blockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SysA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SystA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SysteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		SystemA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.ouA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.outA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.prinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.printA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.printlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.printlnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****IA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****IniA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitiaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitialA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitialiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitializA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitializeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****InitializerA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer BA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer BlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer BloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer BlocA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer BlockA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****exA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****exeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****execA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****execuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed foA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed forA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for evA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for eveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for everA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for everyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every obA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every objA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every objeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every objecA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every objectA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object anA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object andA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and bA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and beA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and befA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and befoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and beforA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and beforeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constucA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor"A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor")A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=nA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=nuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//asA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assignA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assignedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned theA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the autA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the autoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-genA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-geneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generatedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated nA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated nuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId toA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to cuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to cusA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SysA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SystA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SysteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		SystemA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.ouA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.outA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.prinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.printA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.printlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.printlnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****nA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****noA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_argA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constucA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor *A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor **A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****exA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****exeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****execA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****execuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed foA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed forA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for evA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for eveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for everA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for everyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every obA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every objA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every objeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every objecA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every objectA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object crA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object creA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object creaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object creatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object createA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object createdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created uA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created usA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created usiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created usinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created usingA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using deA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using defA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using defaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using defauA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using defaulA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using defaultA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default construA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default construcA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ")A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName,A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName,A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo,A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email,A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, DA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, DaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, DatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, DateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SysA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SystA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SysteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		SystemA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.ouA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.outA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.prA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.priA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.prinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.printA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.printlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.printlnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("*A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("**A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OvA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverloaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverloadA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverloadeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****OverloadedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constucA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor *A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor **A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ***A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****exA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****exeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****execA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****execuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed foA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed forA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for evA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for eveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for everA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for everyA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every oA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every obA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every objA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every objeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every objecA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every objectA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object crA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object creA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object creaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object creatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object createA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object createdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created uA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created usA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created usiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created usinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created usingA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OvA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverlA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverloA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverloaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverloadA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverloadeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using OverloadedA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded cA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded coA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded conA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded consA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded construA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded construcA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructorA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ")A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OvA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OveA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverridA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverrideA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@OverrideA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toSA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toStA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toStrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toStriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toStrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toStringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmplA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmploA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmployA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmployeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "EmployeeA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ",A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ",A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ",A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
			A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ",A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ",A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj="A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj +A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]"A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}/A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//genA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//geneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate gettA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getterA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate gettersA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters aA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters anA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters andA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and settA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setteA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setterA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and settersA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and settersA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(iA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(inA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(intA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empIA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empIdA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = fA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = fiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firsA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = laA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lasA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastNaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastNamA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastNameA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phonA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(SA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(StA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(StrA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(StriA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(StrinA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(StringA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = eA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = emA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = emaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = emaiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = emailA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public DA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public DaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public DatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public DateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date gA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date geA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj()A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		rA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		reA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		retA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		retuA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		returA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		returnA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	pA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	puA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	pubA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	publA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	publiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	publicA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public vA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public voA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public voiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public voidA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void sA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void seA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(DA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(DaA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(DatA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(DateA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj)A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		tA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		thA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		thiA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		thisA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj =A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = dA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = dojA/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}
A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}

A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}

}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}

}A/**
 * 
 */

import java.util.Date;/** * @author SMita * */
public class Employee {
	private int empId;
	private String firstName;
	private String lastName;
	private String phoneNo;
	private String email;
	private Date doj;//date of joining
	//step 4 : private static variables
	private static int numId;//automatic id generation
	//step 5 : static initializer block
	static {
		System.out.println("****Static Initializer Block**** executed only once and before constuctor");
		//automatic id generation
		numId=10000+(int) (Math.random()*122.123);//explicitly type cast long to int
	}
	//step 6: initializer block
	{
		System.out.println("****Initializer Block****executed for every object and before constuctor");
		empId=numId;//assigned the auto-generated numId to custId
	}
	public Employee() {
		System.out.println("****no_arg Employee constuctor ****executed for every object created using default constructor ");
	}
	public Employee(String firstName, String lastName, String phoneNo, String email, Date doj) {
		System.out.println("****Overloaded Employee constuctor ****executed for every object created using Overloaded constructor ");

		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNo = phoneNo;
		this.email = email;
		this.doj = doj;
	}
	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", firstName=" + firstName + ", lastName=" + lastName + ", phoneNo="
				+ phoneNo + ", email=" + email + ", doj=" + doj + "]";
	}//generate getters and setters
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNo() {
		return phoneNo;
	}
	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Date getDoj() {
		return doj;
	}
	public void setDoj(Date doj) {
		this.doj = doj;
	}

}
