9930989832
cbdesh2013@gmail.com

redirect 
	Client -> page a
	a.redirect to b
	response from a to browser
	browser will send request to b
	b will send response to browser

redirect can be used to call a servlet from another project/server
dispatching can only work with project	
	
dispatching: Forward and include
	Client -> page a
	a.dispatching to b
	a will call b
	b will send response to browser

	The main difference is that when you use forward the control is transferred to the next servlet/jsp you are calling, while include retains the control with the current servlet, it just includes the processing done by the calling servlet/jsp(like doing any out.println or other processing)
	
context parameters are available to all

config parameters are specific to a particular servlet
	
3 interfaces
Servlet, ServletConfig, Serializable

*******************************************************************************
Rules for DAO Layer
================
ClassNotFoundException, SQLException must not come out of DAO class
Database specific entities must not come out of the DAO class (like Exception 
and classes)
Each and every resource (Connection, Statements, ResultSets) must be closed 
properly
Always prefer Statement over PreparedStatement for non interactive querues. 
As PreparedStatements are slow
Fetch data page-wise
Prefer mentioning column names instead of column names
DAO is a JEE pattern
*******************************************************************************

*******************************************************************************
Rules for Service Layer
=======================
One layer refers to another layer through interface only
This layer will also ensure only Custom exception to come out

Only one gateway with preserving privacy of all inner classes
One point for implementing security, transaction management, caching.
Multiple interfaces per client to give restricted view of all service
Facade pattern(GoF pattern)(Gang of Four)
Delegates and controls Cross Cutting Concerns
*******************************************************************************

*******************************************************************************
Rules for Web Layer
=======================
Front Controller - JEE Design Pattern
Command Pattern (GoF pattern)
*******************************************************************************


Scriplet: <% java %> goes into service method of Servlet in the order of their mention
Directives: <%@ page, include, taglib %>
page: (declare metadata for that page) session, isErrorPage, errorPage, extends
include: Precompiled inclusion of jsp code
taglib: To define URL for library

Declarations: <%! Instance fields, override init()/destroy(), define custom method %>
Expression: <%= Math expression/ method returning a value%>
JSP element: <jsp:xxx/>

Standard tag library
	Library of java code with methods
	Methods are called through Markup Language syntax
Custom tags



*******************************************************************************
Cookies
=======================
Session Cookies - stored in memory on browser
Persistent Cookies - stored on disk by browser

cookie is storage in user machine. Browser controls the storage
cookie is a class given in servlet where you can store information. This class only TEXT information
cookie can hold max 4MB of data
For 1 website max 20 cookies can be maintained
Overall max 300 cookies a browser can maintain

Cookies with age (Persistent cookies) go on disk
cookies without age (Session cookies) are in browser memory

*******************************************************************************

*******************************************************************************
Session
=======================
getSession()/getSession(true):
					If session exists: Bring the reference of session.
					Otherwise create a new session.
getSession(false):  
					If session exists: Bring the reference of session.
				    Otherwise return null
*******************************************************************************

*******************************************************************************
JSP inherit objects
=======================

	final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;
    
*******************************************************************************

27/11 Tuesday
Basics of MVC
JSP in further detail
Interservlet communication in further detail
Session Management

28/11 Wednesday
Write end to end case study

29/11 Thursday
Advanced concepts
Listner
Filter
Connection pool
Custom tags

30/11 Friday
Implementation of concepts and preparing for exam